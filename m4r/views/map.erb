<script type="text/javascript" charset="utf-8">
var proxy_host = "<%= PLATFORM_API_URL %>";    
var project_attributes = ["project t0", "project i0", "activity count", "total amt0", "sector1", "approval 0"];
var worldbank_sectors = ["agriculture","communication","energy","education","finance","health","industry","public","transportation","water"];

var project_sectors = {"General agriculture":"agriculture", "Agricultural extension and research":"agriculture", "fishing and forestry sector":"agriculture", 
  "Central government administration":"public","Public administration- Energy and mining": "public", "Public administration- Agriculture, fishing and forestry": "public", 
  "Primary education":"education", "Tertiary education": "education",
  "Other social services":"health",
  "Water supply":"water",
  "General transportation sector":"transportation","Roads and highways":"transportation", 
  "Renewable energy":"energy",  "Power": "energy", 
  "Non-compulsory pensions, insurance and contractual savings":"finance",
  "Default":"public"};

// , "General agriculture, fishing and forestry sector":"agriculture"
if(typeof(F1)=='undefined') {F1 = {}}
(function(){
  F1.WorldBank = function(options) {  //constructor
    this.options = options;
    // F1.WorldBank.instances[options.id] = this;
  }


  F1.WorldBank.prototype = {
    init: function(map_id) {
      
      var self = this;
      this.activities = {};
      this.projects = {};
      this.sectors = {};

      for(var i=0;i< worldbank_sectors.length;i++) {
        this.sectors[worldbank_sectors[i]] = {funding: 0, projects: [], activities: 0, sector: worldbank_sectors[i]};
      }

      
      this.map = new F1.Maker.Map( { dom_id:"geoiq_map",map_id:map_id, 
                uiZoom: true,uiLayers: false,uiLegend: true,uiStyles: true,
                uiHeader: true,hideGCLogo: true,hideGILogo: true,
                ShowControl:("Legend",true,"open"),
                core_host:  proxy_host + '/', finder_host:proxy_host + '/', maker_host: proxy_host + '/',
                onload: function() { <%= @country[:projects].nil? ? "" : "self.drawCharts(map, #{(@country[:projects])});" %> }
      });

    },
  
    sortData: function(data) {
      var self = this;
      self.activities = jq.map(data.features, function(feature) { 
        if (feature) {
          attr = feature.attributes;
          if(self.projects[attr["project i0"]] == null) { // first time we've seen this project ID
            var project = {};

            // Get the project level attributes
            for(var i = 0;i<project_attributes.length;i++) {
              if(project_attributes[i] != "activity count")
                project[project_attributes[i]] = attr[project_attributes[i]];
            }
            project["financing"] = "$" + attr[project_attributes["total amt0"]] + " million";
            project["activity count"] = 0;
            self.projects[attr["project i0"]] = project
            
            // Add to sector funding and project count
            var sector = project["sector1"];
            var wb_sector = project_sectors[sector];

            if(wb_sector == null)
              wb_sector = project_sectors["Default"];
              
            self.sectors[wb_sector].funding += attr["total amt0"];
            self.sectors[wb_sector].projects.push(project);            
          }
          self.projects[attr["project i0"]]["activity count"] += 1;
          
          var wb_sector = project_sectors[self.projects[attr["project i0"]]["sector1"]];
          if(wb_sector == null)
            wb_sector = project_sectors["Default"];

          self.sectors[wb_sector].activities += 1;
          return attr;
        }
      });      
    },
    projectTable: function(data) {
      data.attributes["activity count"] = {original_name: "activity county", name: "Activities"}
      data.attributes["financing"] = {original_name: "financing", name: "Financing"}
      data.features = this.projects;

      F1.Visualizer.charts.grid(500, 930, data, "projects-table", project_attributes);
    },
    sectorPieChart: function(sector_name) {
      var self = this;
      console.log(self.sectors[sector_name].projects);
      pie_options = {"features":self.sectors[sector_name].projects, 
          "attributes": {"data":{"name": "Funding","original_name": "total amt0"},
          "description":{"name": "Project","original_name": "project i0"}, 
          "sort":{"name": "Funding","original_name": "total amt0"} } };
      F1.Visualizer.charts.pie(180, 455, pie_options, "funding_by_region");
    },
    sectorFundingBars: function() {
      var self = this;
      console.log("Bar");
      console.log(self.sectors)
      var s;
      var features = [];
      for(s in self.sectors) { features.push(self.sectors[s]); }
      console.log(features)
      bar_options = {"features":features, "attributes": {
            "data":{"name": "Funding", "original_name": "funding"}, 
            "description":{"name": "Sector", "original_name": "sector"}, 
            "sort":{"name": "Activities","original_name": "activities"} } };
      F1.Visualizer.charts.bar(180, 455, bar_options, "overall_funding");
    },  
    drawCharts: function(map, projects_id) {
      var self = this;
      F1.Visualizer.utils.get_data_from_flash(projects_id, function(data) {
          console.log("data retrieved")
          self.sortData(data);
          self.projectTable(data);
          self.sectorPieChart("public");        
          self.sectorFundingBars();
        }, map);
      }      
  }
})();  // preserving the global namespace

var wb = new F1.WorldBank();
wb.init(<%= @country[:map].to_s %>);
</script>