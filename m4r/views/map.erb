<script type="text/javascript" charset="utf-8">
var proxy_host = "<%= PLATFORM_API_URL %>";    
var project_attributes = ["project title", "project id", "activity count", "financing", "sector1", "approval date"];

// , "General agriculture, fishing and forestry sector":"agriculture"
if(typeof(F1)=='undefined') {F1 = {}}
(function(){
  Object.size = function(obj) {
      var size = 0, key;
      for (key in obj) {
          if (obj.hasOwnProperty(key)) size++;
      }
      return size;
  };

  Object.include = function(arr, obj) {
    for(var i=0; i<arr.length; i++) {
      if (arr[i] == obj) return i;
    }
    return null;
  }

  Array.prototype.flatten = function flatten(){
     var flat = [];
     for (var i = 0, l = this.length; i < l; i++){
         var type = Object.prototype.toString.call(this[i]).split(' ').pop().split(']').shift().toLowerCase();
         if (type) { flat = flat.concat(/^(array|collection|arguments)$/.test(type) ? flatten.call(this[i]) : this[i]); }
     }
     return flat;
  };

  String.prototype.capitalize = function(){
    return this.replace( /(^|\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase(); } );
  };  
  
  F1.WorldBank = function(options) {  //constructor
    this.options = options;
    // F1.WorldBank.instances[options.id] = this;
  }

  F1.WorldBank.indicators = {
    "Poverty": {source: "finder:", title:"Poverty", subtitle: "Headcount Index", styles: { type: "CHOROPLETH",fill: { colors: [0xFEF7A5, 0xFECE6D, 0xEC8414, 0xAE4C02, 0x662506], categories: 5, classificationType: "St Dev", opacity: 0.55, selectedAttribute: "Height_for" }}},
    "Malnutrition": {source: "finder:", title:"Child Malnutrition", subtitle: "Percentile weight of Children under 5", styles: { type: "CHOROPLETH", stroke: {color: 0x222222}, fill: { colors: [0x4A342C, 0x7C6253, 0xA4866D, 0xD1B79F, 0xEBD9C2], categories: 5, classificationType: "EQUAL INTERVAL", opacity: 0.75, selectedAttribute: "WFAB2SD" }}},
    "Infant Mortality": {source: "finder:", title:"Infant Mortality Rate", subtitle: "Per 1,000 live births", styles: { type: "CHOROPLETH", stroke: {color: 0x222222}, fill: { colors: [0xFEE5D9, 0xFCAE91, 0xFB6A4A, 0xDE2D26, 0xA50F15], categories: 5, classificationType: "EQUAL INTERVAL", opacity: 0.75, selectedAttribute: "IM1q0"}}},  
    "Maternal Health": {source: "finder:", title:"Births attended by skilled health staff ", subtitle: "% of Total", styles: { type: "CHOROPLETH",stroke: {color: 0x222222}, fill: { colors: [0x511483, 0x835BA4, 0xC090BD, 0xE3BBC2, 0xFCE3D7], categories: 5, classificationType: "EQUAL INTERVAL", opacity: 0.75, selectedAttribute: "DBHP"}}},
    "Population": {source: "finder:", title:"Population", subtitle: "Total Number of People", styles: { type: "CHOROPLETH",stroke: {color: 0x222222}, fill: { colors: [0xEFF3FF, 0xBDD7E7, 0x6BAED6, 0x3182BD, 0x08519C], categories: 5, classificationType: "EQUAL INTERVAL", opacity: 0.75, selectedAttribute: "population from statoids"}}}
	},
  F1.WorldBank.prototype = {
    init: function(map_id) {
      
      var self = this;
      this.activities = {};
      this.projects = {};
      this.visibleSectors = [];
      this.sectors = {};
      this.total_funding = 0;
      this.stylelayers = {};
      this.initialized = false;
      this.current_indicator = "Poverty";
      
      this.wbsectors = ["agriculture","public","education","health","water","transportation","energy","finance"]
      this.sectors = {
        "agriculture": {name: "Agriculture, Fishing, and Forestry", funding: 0, projects: [], activities: 0, shortname: "agriculture", icon: "<%= PLATFORM_API_URL %>/images/icons/worldbank/agriculture-on.png"}, 
        "public": {name: "Public Administration, Law, and Justice", funding: 0, projects: [], activities: 0, shortname: "public", icon: "<%= PLATFORM_API_URL %>/images/icons/worldbank/public-on.png"},
        "education": {name: "Education", funding: 0, projects: [], activities: 0, shortname: "education", icon: "<%= PLATFORM_API_URL %>/images/icons/worldbank/education-on.png"}, 
        "health": {name: "Health and Other Social Services", funding: 0, projects: [], activities: 0, shortname: "health", icon: "<%= PLATFORM_API_URL %>/images/icons/worldbank/health-on.png"},
        "water": {name: "Water, Sanitation, and Flood Protection", funding: 0, projects: [], activities: 0, shortname: "water", icon: "<%= PLATFORM_API_URL %>/images/icons/worldbank/water-on.png"},
        "transportation": {name: "Transportation", funding: 0, projects: [], activities: 0, shortname: "transportation", icon: "<%= PLATFORM_API_URL %>/images/icons/worldbank/transportation-on.png"},
        "energy": {name: "Energy and Mining", funding: 0, projects: [], activities: 0, shortname: "energy", icon: "<%= PLATFORM_API_URL %>/images/icons/worldbank/energy-on.png"},
        "finance": {name: "Finance", funding: 0, projects: [], activities: 0, shortname: "finance", icon: "<%= PLATFORM_API_URL %>/images/icons/worldbank/finance-on.png"}};
        
      this.sector_names = {};
      jq.each(self.sectors, function(sector) {return self.sector_names[self.sectors[sector].name] = sector });
        
      this.map = new F1.Maker.Map( { dom_id:"geoiq_map",map_id:map_id, 
                uiZoom: true,uiLayers: false,uiLegend: true,uiStyles: true,
                uiHeader: true,hideGCLogo: true,hideGILogo: true,
                ShowControl:("Legend",true,"open"),
                core_host:  proxy_host + '/', finder_host:proxy_host + '/', maker_host: proxy_host + '/',
                onload: function() {  <%= @country[:projects].nil? ? "" : "initializeWorldBank(wb);" %> }
      });
    },
    setBookmark: function(key, value) {
      
    },
    setState: function(location,indicator,project,sectors) {
      if(location != null)
        setLocation("",location.lat,location.lon,location.zoom);
      this.setIndicator(indicator);
      if(sectors != null){
        var sector;
        for(sector in sectors)
          this.toggleSector(sectors[sector]);
      } else {
        this.toggleSector('all', false)
      }
    },
    setLocation: function(region,lat,lon,zoom) {
      // this.setBookmark('region', region);
      this.map.swf.setCenterZoom(lat,lon,zoom);
    },
    hideSectors: function() {
      var self = this;
      jq.each(self.sectors, function (sector) {
        self.map.addFilter(self.stylelayers["Project Locations"].order, {expression: "$[sector1] == " + self.sectors[sector].shortname});
      });
    },
    highlighProject: function(project_id) {
      var highlightExpression = "$[project id] == '"+project_id+"'";
      this.map.swf.clearHighlights(this.stylelayers["Project Locations"].order);
      this.map.swf.addHighlight(this.stylelayers["Project Locations"].order, highlightExpression);
    },
    toggleSector: function(sector,visible) {
      var self = this;
      var visibleExpression = "";
      if(visible == null){
        visible = !(jq("#sectorcontrol_" + sector).hasClass('active'));
      }
      
      console.log("toggleSector = " + sector + " - " + visible);
      
      if(sector == "none") {
        self.map.showLayer(self.stylelayers["Project Locations"].order, visible);
        self.map.showLayer(self.stylelayers["Project Counts"].order, visible);        
      } else if(sector == 'all') {
        if(visible) {
          jq.each(self.sectors, function(sector) {
            if(!Object.include(self.visibleSectors, sector))
              self.visibleSectors.push(sector);
          });
        } else {
          self.map.swf.clearFilters(self.stylelayers["Project Locations"].order);
          self.visibleSectors = [];
        }
        
        self.map.showLayer(self.stylelayers["Project Locations"].order, visible);
        self.map.showLayer(self.stylelayers["Project Counts"].order, !visible);
      } else if(sector == 'counts') {
        self.map.showLayer(self.stylelayers["Project Counts"].order, visible);
        self.map.showLayer(self.stylelayers["Project Locations"].order, !visible);
      } else if(sector == null) {
        self.map.showLayer(self.stylelayers["Project Locations"].order, false);
        self.map.showLayer(self.stylelayers["Project Counts"].order, false);
      } else if(visible == true){
        self.map.showLayer(self.stylelayers["Project Counts"].order, false);
        self.map.showLayer(self.stylelayers["Project Locations"].order, false);
        self.map.swf.removeFilter(self.stylelayers["Project Locations"].order, 
              {expression: self.complexSectorExpression(self.visibleSectors)});
        
        if(!Object.include(self.visibleSectors, sector)) {
          self.visibleSectors.push(sector);    
          console.log("Visible: ")
          console.log(self.visibleSectors);
          self.map.swf.addFilter(self.stylelayers["Project Locations"].order, 
              {expression: self.complexSectorExpression(self.visibleSectors)});
        }

        self.map.showLayer(self.stylelayers["Project Locations"].order, true);
        
      } else if(visible == false){
        // self.map.showLayer(self.stylelayers["Project Counts"].order, false);
        self.map.swf.removeFilter(self.stylelayers["Project Locations"].order, 
            {expression: self.complexSectorExpression(self.visibleSectors)});
        self.visibleSectors = jQuery.grep(self.visibleSectors, function(value) {
          return value != sector;
        });
        self.map.swf.addFilter(self.stylelayers["Project Locations"].order, {expression: self.complexSectorExpression(self.visibleSectors)});
      }
      
      self.showVisibleSectors();
      //jq('#sector_funding_description').html("Description about " + sector);
      //self.sectorPieChart(sector);
    },
    showVisibleSectors: function() {
      var self = this;
      var sectorcontrols = jq('.sectorcontrol');
      jq.each(sectorcontrols, function(sc) {
          console.log(sectorcontrols[sc].attr("sector-name"));
          if(Object.include(self.visibleSectors, sectorcontrols[sc])) {
            jq("#sectorcontrol_" + wb.visibleSectors[jq("#"+sectorcontrols[sc].id).attr("sector-name")]).removeClass('inactive').addClass('active');
          } else {
            jq("#sectorcontrol_" + wb.visibleSectors[jq("#"+sectorcontrols[sc].id).attr("sector-name")]).removeClass('active').addClass('inactive');            
          }
          
      });
    },
    complexSectorExpression: function(sectorFilters, sector_attribute) {
      var self = this;
      var expression = "";
      if(sector_attribute == null)
        sector_attribute = "sector1";
        
      console.log("complex1");
      console.log(sectorFilters);
      
      for(var sector=0;sector<sectorFilters.length; sector++) {
        console.log("sectorFilters[sector]");
        console.log("complex: " + self.sectors[sectorFilters[sector]].name);
        expression += "$["+sector_attribute+"] == '" + self.sectors[sectorFilters[sector]].name + "'";
        if(sector != sectorFilters.length-1)
          expression += " OR ";
      };
      console.log("Expression: " + expression);
      return expression;
    },    
    setIndicator: function(indicator,visible) {
      var self = this;
      self.map.showLayer(self.stylelayers[self.current_indicator].order, false);
      if(indicator == null) {
        jq('#indicator').html("Indicators");
        self.map.showLayer(self.stylelayers[indicator].order, false);
      }
      else {
        jq('#indicator').html(indicator);
        
        var style = F1.WorldBank.indicators[indicator].styles;
        style.source = self.stylelayers[indicator];
        self.map.setLayerStyle(self.stylelayers[indicator].order, style);

        // self.map.setLayerTitle(self.stylelayers[indicator].order, F1.WorldBank.indicators[indicator].title);
        // self.map.setLayerSubtitle(self.stylelayers[indicator].order, F1.WorldBank.indicators[indicator].subtitle);
        self.map.showLayer(self.stylelayers[indicator].order, true);
      }
      self.current_indicator = indicator;
      
    },

    sortData: function(data) {
      var self = this;
      self.activities = jq.map(data.features, function(feature) { 
        if (feature) {
          attr = feature.attributes;
          if(self.projects[attr["project id"]] == null) { // first time we've seen this project ID
            var project = {};

            // Get the project level attributes
            for(var i = 0;i<project_attributes.length;i++) {
              if(project_attributes[i] != "activity count")
                project[project_attributes[i]] = attr[project_attributes[i]];
            }
            project["financing amount"] = attr["total amt"];
            project["financing"] = "$" + attr["total amt"] + " million";
            project["activity count"] = 0;
            self.projects[attr["project id"]] = project
            
            // Add to sector funding and project count
            var sector_name = project["sector1"];
            var wb_sector = self.sectors[self.sector_names[sector_name]];

            if(wb_sector == null)
              wb_sector = self.sectors["public"];
              
            wb_sector.funding += attr["total amt"];
            wb_sector.projects.push(project);
            self.total_funding += wb_sector.funding;
          }
          self.projects[attr["project id"]]["activity count"] += 1;
          
          // var wb_sector = self.sectors[self.sector_names[self.projects[attr["project id"]]["sector1"]]];
          // if(wb_sector == null)
          //   wb_sector = self.sectors["public"].name;
          // 
          // console.log("sortData: " + wb_sector);
          // 
          // self.sectors[self.sector_names[wb_sector]].activities += 1;
          return attr;
        }
      });      
    },
    projectTable: function(data) {
      jq('#project_count').html(Object.size(this.projects));
      jq('#activity_count').html(this.activities.length);
      data.attributes["activity count"] = {original_name: "activity county", name: "Activities"}
      data.attributes["financing"] = {original_name: "financing", name: "Financing"}
      data.features = this.projects;

      F1.Visualizer.charts.grid(500, 960, data, "projects-table", project_attributes);
    },
    sectorPieChart: function(sector_name) {
      var self = this;

      var projects = [];
      var funding = 0;
      var sector_names = "";
      if(sector_name == "all") {
        for(var sn in self.sectors) {
          projects.push(self.sectors[sn].projects);
          funding += self.sectors[sn].funding;
        }
        projects = projects.flatten(); 
      } else {
        // projects = self.sectors[sector_name].projects;
        // funding = self.sectors[sector_name].funding;
        for(var sn=0;sn<self.visibleSectors.length;sn++) {
          if(self.sectors[self.visibleSectors[sn]] != null) {
            //console.log(self.sectors[self.visibleSectors[sn]].projects);
            projects.push(self.sectors[self.visibleSectors[sn]].projects);
            funding += self.sectors[self.visibleSectors[sn]].funding;
            if(sn != 0){
              sector_names += ", ";
            }
            sector_names += self.visibleSectors[sn].capitalize();
          }
        }
        
        projects = projects.flatten();
      }
      
      //////console.log(self.sectors[sector_name].projects);
      if(projects.length == 0){
        jq('#chart-left-pie-chart').hide();
        jq('#sector_funding_total').html("There are no projects in this sector.");
        return;
      }
            
      jq('#sector_funding_title').html("Project Funding for " + sector_names + " Projects <a href='#footnote' title='(as of June 30,2010)'>[1]</a>")
      jq('#sector_funding_total').html(funding.toFixed(1) + " Million");
      
      var links = jq.map(projects, function (project) { 
          return "javascript:wb.highlighProject('" + project["project id"] + "');";  
        });
      
      pie_options = {"features":projects, 
          "attributes": {"data":{"name": "Funding","original_name": "financing amount"},
          "description":{"name": "Project","original_name": "project id"}, 
          "sort":{"name": "Funding","original_name": "financing amount"} } };
      jq('#chart-left-pie-chart').show();

      F1.Visualizer.charts.pie(180, 505, pie_options, "chart-left-pie-chart", {href: links });
    },
    sectorFundingBars: function() {
      var self = this;
      var s;
      var features = [];
      var links = [];

      for(s in self.sectors) { 
        features.push(self.sectors[s]);
        links.push( self.sectors[s]["sector"] );
      }

      jq('#funding_total').html(self.total_funding.toFixed(1) + " Million");
      
      bar_options = {"features":features, "attributes": {
            "data":{"name": "Financing", "original_name": "funding"}, 
            "description":{"name": "Sector", "original_name": "sector1"}, 
            "sort":{"name": "Total Amount","original_name": "funding"} } };
      F1.Visualizer.charts.bar(180, 455, bar_options, "chart-right-graph", {href: links, label: function() {
        return links[this.bar.index];
      }, onclick: function() {
          wb.toggleSector(links[this.bar.index]);
         }});
    },
    getLayers: function(map) {
      var self = this;
      var findlayers = ["Indicators", "Project Locations", "Project Counts", "Population", "Poverty", "Infant Mortality", "Maternal Health", "Malnutrition"];
      var possibleLayers = map.getLayers();
      var j,f;
      var index;
      var found;
      for(f=0; f<findlayers.length; f++) {
        found = false;
        for(j in possibleLayers) {
          //index = Object.include(findlayers, possibleLayers[j].title);
          if(findlayers[f] == possibleLayers[j].title){
            self.stylelayers[findlayers[f]] = {order: possibleLayers[j].order, source: possibleLayers[j].source};
            // self.map.swf.setLayerTitle(possibleLayers[j].order, F1.WorldBank.indicators[possibleLayers[j].title]);
            // self.map.swf.setLayerSubTitle(possibleLayers[j].order, F1.WorldBank.indicators[possibleLayers[j].subtitle]);
            found = true;
            break;
          } else if(!found) {
            self.stylelayers[findlayers[f]] = false;
          }
         }
       }
       // second pass if we missed any
       jq.each(findlayers, function(layer) {
         if(self.stylelayers[findlayers[layer]] == false){
          self.stylelayers[findlayers[layer]] = {order: self.stylelayers["Indicators"].order, source: self.stylelayers["Indicators"].source};                 
          }
          // self.map.swf.setLayerTitle(possibleLayers[j].order, F1.WorldBank.indicators[possibleLayers[j].title]);
          // self.map.swf.setLayerSubTitle(possibleLayers[j].order, F1.WorldBank.indicators[possibleLayers[j].subtitle]);
       });

       
       
       jq('#download_data').attr('href','<%= PLATFORM_API_URL %>/datasets/' + self.stylelayers["Project Locations"].source.replace("finder:","")  + ".csv")
       return false;
    },
    styleMap: function(map) {
      var self = this;
      
      icons = {};
      jq.each(self.sectors, function(sector) {
        icons[self.sectors[sector].name] = self.sectors[sector].icon;
      });
            
      // icons
      map.swf.addLayerCategoryFilter(self.stylelayers["Project Locations"].order, {attribute:"sector1",categories:icons});
      
      // infowindow
      map.swf.addLayerInfoWindowFilter(self.stylelayers["Project Locations"].order, {title: "$[project title]", subtitle: "$[sector1]", tabs:[{title: "About", type: "text", value:"Total Financing: $ $[total amt] million"}, {title: "Financing", type: "table", value: "$[project id]$[total disb]$[activity count]$[adm1]$[adm2]$[region]$[approval date]$[sector1]$[sector2]$[sector3]"}]});
        
      // legend
      map.swf.setStyle( { legend: { buttonBgColor:0x92948C, buttonPlacement:"horizontal", buttonFontColor:0xFFFFFF, buttonBgAlpha:0.7,offset:{x:0,y:95}}});

      wb.setIndicator("Poverty");
      
    },
    drawCharts: function(map) {
      var self = this;
      if( self.initialized ) {return;}
      self.getLayers(map);
      self.styleMap(map);
      F1.Visualizer.utils.get_data_from_flash(self.stylelayers["Project Locations"].source.replace("finder:",""), function(data) {
          self.sortData(data);
          self.projectTable(data);
          // self.sectorFundingBars();
          self.initialized = true;
        }, map);
      }      
  }
})();  // preserving the global namespace

jq(".collapsible-header").click(function () {
      if(jQuery(this).hasClass("expanded")) {
        jq("#collapsible-banner").hide("blind", { direction: "vertical" }, 2000);
        jq(this).removeClass("expanded").addClass("collapsed");      
      } else {
        jq("#collapsible-banner").show("blind", { direction: "vertical" }, 2000);
        jq(this).removeClass("collapsed").addClass("expanded");  
      }
});

var wb = new F1.WorldBank();
wb.init(<%= @country[:map].to_s %>);

function initializeWorldBank(wb_project) { wb_project.drawCharts(wb_project.map)}
</script>