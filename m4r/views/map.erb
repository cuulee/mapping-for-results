<script type="text/javascript" charset="utf-8">
var proxy_host = "<%= PLATFORM_API_URL %>";    
var project_attributes = ["project title", "project id", "activity count", "financing", "sector1", "approval date"];
var worldbank_sectors = ["agriculture","communication","energy","education","finance","health","industry","public","transportation","water"];

var sector_icons =  {"EP":"<%= PLATFORM_API_URL %>/images/icons/worldbank/education-on.png","AZ":"<%= PLATFORM_API_URL %>/images/icons/worldbank/agriculture-on.png","JB":"<%= PLATFORM_API_URL %>/images/icons/worldbank/health-on.png","BC":"<%= PLATFORM_API_URL %>/images/icons/worldbank/public-on.png","TA":"<%= PLATFORM_API_URL %>/images/icons/worldbank/transportation-on.png","LE":"<%= PLATFORM_API_URL %>/images/icons/worldbank/energy-on.png","TZ":"<%= PLATFORM_API_URL %>/images/icons/worldbank/transportation-on.png","LD":"<%= PLATFORM_API_URL %>/images/icons/worldbank/energy-on.png", "WC":"<%= PLATFORM_API_URL %>/images/icons/worldbank/water-on.png","WZ":"<%= PLATFORM_API_URL %>/images/icons/worldbank/water-on.png","BL":"<%= PLATFORM_API_URL %>/images/icons/worldbank/public-on.png","BU":"<%= PLATFORM_API_URL %>/images/icons/worldbank/public-on.png","AB":"<%= PLATFORM_API_URL %>/images/icons/worldbank/agriculture-on.png","FD":"<%= PLATFORM_API_URL %>/images/icons/worldbank/finance-on.png","ET":"<%= PLATFORM_API_URL %>/images/icons/worldbank/education-on.png"};

var sector_codes = {"education":["EP","ET"],"communications": [],"finance":["FD"], "agriculture": ["AB","AZ"], "health": ["JB"], "public": ["BU","GC","BL"], "transportation": ["TA","TZ"], "water": ["WC","WZ"], "energy":["LE","LD"], "industry": [] };

var project_sectors = {"Agriculture, Fishing, and Forestry": "agriculture", "General agriculture":"agriculture", "Agricultural extension and research":"agriculture", "fishing and forestry sector":"agriculture", 
  "Public Administration, Law, and Justice":"public","Central government administration":"public","Public administration- Energy and mining": "public", "Public administration- Agriculture, fishing and forestry": "public", 
  "Education":"education", "Primary education":"education", "Tertiary education": "education",
  "Health and Other Social Services":"health","Other social services":"health",
  "Water, Sanitation, and Flood Protection":"water","Water supply":"water",
  "Transportation":"transportation","General transportation sector":"transportation","Roads and highways":"transportation", 
  "Energy and Mining":"energy","Renewable energy":"energy",  "Power": "energy", 
  "Finance":"finance","Non-compulsory pensions, insurance and contractual savings":"finance",
  "Default":"public"};

// , "General agriculture, fishing and forestry sector":"agriculture"
if(typeof(F1)=='undefined') {F1 = {}}
(function(){
  Object.size = function(obj) {
      var size = 0, key;
      for (key in obj) {
          if (obj.hasOwnProperty(key)) size++;
      }
      return size;
  };

  Object.include = function(arr, obj) {
    for(var i=0; i<arr.length; i++) {
      if (arr[i] == obj) return i;
    }
    return null;
  }

  Array.prototype.flatten = function flatten(){
     var flat = [];
     for (var i = 0, l = this.length; i < l; i++){
         var type = Object.prototype.toString.call(this[i]).split(' ').pop().split(']').shift().toLowerCase();
         if (type) { flat = flat.concat(/^(array|collection|arguments)$/.test(type) ? flatten.call(this[i]) : this[i]); }
     }
     return flat;
  };

  String.prototype.capitalize = function(){
    return this.replace( /(^|\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase(); } );
  };  
  
  F1.WorldBank = function(options) {  //constructor
    this.options = options;
    // F1.WorldBank.instances[options.id] = this;
  }

  F1.WorldBank.indicators = {
    "Poverty": {source: "finder:", title:"Poverty", subtitle: "Headcount Index", styles: { type: "CHOROPLETH",fill: { colors: [0xFEF7A5, 0xFECE6D, 0xEC8414, 0xAE4C02, 0x662506], categories: 5, classificationType: "St Dev", opacity: 0.55, selectedAttribute: "Height_for" }}},
    "Malnutrition": {source: "finder:", title:"Child Malnutrition", subtitle: "Percentile weight of Children under 5", styles: { type: "CHOROPLETH", stroke: {color: 0x222222}, fill: { colors: [0x4A342C, 0x7C6253, 0xA4866D, 0xD1B79F, 0xEBD9C2], categories: 5, classificationType: "EQUAL INTERVAL", opacity: 0.75, selectedAttribute: "WFAB2SD" }}},
    "Infant Mortality": {source: "finder:", title:"Infant Mortality Rate", subtitle: "Per 1,000 live births", styles: { type: "CHOROPLETH", stroke: {color: 0x222222}, fill: { colors: [0xFEE5D9, 0xFCAE91, 0xFB6A4A, 0xDE2D26, 0xA50F15], categories: 5, classificationType: "EQUAL INTERVAL", opacity: 0.75, selectedAttribute: "IM1q0"}}},  
    "Maternal Health": {source: "finder:", title:"Births attended by skilled health staff ", subtitle: "% of Total", styles: { type: "CHOROPLETH",stroke: {color: 0x222222}, fill: { colors: [0x511483, 0x835BA4, 0xC090BD, 0xE3BBC2, 0xFCE3D7], categories: 5, classificationType: "EQUAL INTERVAL", opacity: 0.75, selectedAttribute: "DBHP"}}},
    "Population": {source: "finder:", title:"Population", subtitle: "Total Number of People", styles: { type: "CHOROPLETH",stroke: {color: 0x222222}, fill: { colors: [0xEFF3FF, 0xBDD7E7, 0x6BAED6, 0x3182BD, 0x08519C], categories: 5, classificationType: "EQUAL INTERVAL", opacity: 0.75, selectedAttribute: "population from statoids"}}}
	},
  F1.WorldBank.prototype = {
    init: function(map_id) {
      
      var self = this;
      this.activities = {};
      this.projects = {};
      this.visibleSectors = [];
      this.sectors = {};
      this.total_funding = 0;
      this.stylelayers = {};
      this.initialized = false;
      
      for(var i=0;i< worldbank_sectors.length;i++) {
        this.sectors[worldbank_sectors[i]] = {funding: 0, projects: [], activities: 0, sector: worldbank_sectors[i]};
      }

      this.map = new F1.Maker.Map( { dom_id:"geoiq_map",map_id:map_id, 
                uiZoom: true,uiLayers: false,uiLegend: true,uiStyles: true,
                uiHeader: true,hideGCLogo: true,hideGILogo: true,
                ShowControl:("Legend",true,"open"),
                core_host:  proxy_host + '/', finder_host:proxy_host + '/', maker_host: proxy_host + '/',
                onload: function() {  <%= @country[:projects].nil? ? "" : "initializeWorldBank(wb);" %> }
      });

    },
    setBookmark: function(key, value) {
      
    },
    setState: function(location,indicator,project,sectors) {
      if(location != null)
        setLocation("",location.lat,location.lon,location.zoom);
      this.setIndicator(indicator);
      if(sectors != null){
        var sector;
        for(sector in sectors)
          this.toggleSector(sectors[sector]);
      } else {
        this.toggleSector('all', false)
      }
    },
    setLocation: function(region,lat,lon,zoom) {
      this.setBookmark('region', region);
      this.map.setCenterZoom(lat,lon,zoom);
    },
    hideSectors: function() {
      for(var s in worldbank_sectors) {
        self.map.addFilter(self.stylelayers["Project Locations"].order, {expression: "$[sector1] == " + worldbank_sectors[s]});
      }
    },
    complexSectorExpression: function(sectors, sector_attribute) {
      var expression = "";
      if(sector_attribute == null)
        sector_attribute = "sector1code";
        
      for(var s=0;s<sectors.length; s++) {        
        for(var sc=0;sc<sector_codes[sectors[s]].length; sc++) {
          expression += "$["+sector_attribute+"] == '" + sector_codes[sectors[s]][sc] + "'";
          if(sc != sector_codes[sectors[s]].length-1)
            expression += " OR ";
        }
        if(s != sectors.length-1)
          expression += " OR ";
      };
      return expression;
    },
    highlighProject: function(project_id) {
      var highlightExpression = "$[project id] == '"+project_id+"'";
      this.map.swf.clearHighlights(this.stylelayers["Project Locations"].order);
      this.map.swf.addHighlight(this.stylelayers["Project Locations"].order, highlightExpression);
    },
    toggleSector: function(sector,visible) {
      var self = this;
      var visibleExpression = "";
      if(visible == null){
        visible = !(jq("#sectorcontrol_" + sector).hasClass('active'));
      }
      if(sector == 'all') {
        self.map.showLayer(self.stylelayers["Project Locations"].order, visible);
        self.map.swf.clearFilters(self.stylelayers["Project Locations"].order);
      } else if(sector == null) {
        self.map.showLayer(self.stylelayers["Project Locations"].order, "false");
      } else if(visible == true){
        jq("#sectorcontrol_" + sector).addClass("active");
        self.map.swf.removeFilter(self.stylelayers["Project Locations"].order, 
            {expression: self.complexSectorExpression(self.visibleSectors)});
        self.visibleSectors.push(sector);
        self.map.swf.addFilter(self.stylelayers["Project Locations"].order, 
            {expression: self.complexSectorExpression(self.visibleSectors)});
      } else if(visible == false){
        jq("#sectorcontrol_" + sector).removeClass("active");
        self.map.swf.removeFilter(self.stylelayers["Project Locations"].order, 
            {expression: self.complexSectorExpression(self.visibleSectors)});
        self.visibleSectors = jQuery.grep(self.visibleSectors, function(value) {
          return value != sector;
        });
        self.map.swf.addFilter(self.stylelayers["Project Locations"].order, {expression: self.complexSectorExpression(self.visibleSectors)});
        
      }
      
      jq('#sector_funding_description').html("Description about " + sector);
      self.sectorPieChart(sector);
    },
    setIndicator: function(indicator,visible) {
      var self = this;
      if(indicator == null) {
        jq('#indicator').html("Indicators");
        self.map.showLayer(self.stylelayers[indicator].order, "false");
      }
      else {
        jq('#indicator').html(indicator);
        self.map.showLayer(self.stylelayers[indicator].order, "true");
        var style = F1.WorldBank.indicators[indicator].styles;
        style.source = self.stylelayers[indicator];
        self.map.setLayerStyle(self.stylelayers[indicator].order, style);
        self.map.setLayeTitle(self.stylelayers[indicator].order, F1.WorldBank.indicators[indicator].title);
        self.map.setLayeSubtitle(self.stylelayers[indicator].order, F1.WorldBank.indicators[indicator].subtitle);
      }
    },

    sortData: function(data) {
      var self = this;
      self.activities = jq.map(data.features, function(feature) { 
        if (feature) {
          attr = feature.attributes;
          if(self.projects[attr["project id"]] == null) { // first time we've seen this project ID
            var project = {};

            // Get the project level attributes
            for(var i = 0;i<project_attributes.length;i++) {
              if(project_attributes[i] != "activity count")
                project[project_attributes[i]] = attr[project_attributes[i]];
            }
            project["financing amount"] = attr["total amt"];
            project["financing"] = "$" + attr["total amt"] + " million";
            project["activity count"] = 0;
            self.projects[attr["project id"]] = project
            
            // Add to sector funding and project count
            var sector = project["sector1"];
            var wb_sector = project_sectors[sector];

            if(wb_sector == null)
              wb_sector = project_sectors["Default"];
              
            self.sectors[wb_sector].funding += attr["total amt"];
            self.sectors[wb_sector].projects.push(project);
            self.total_funding += self.sectors[wb_sector].funding;
          }
          self.projects[attr["project id"]]["activity count"] += 1;
          
          var wb_sector = project_sectors[self.projects[attr["project id"]]["sector1"]];
          if(wb_sector == null)
            wb_sector = project_sectors["Default"];

          self.sectors[wb_sector].activities += 1;
          return attr;
        }
      });      
    },
    projectTable: function(data) {
      jq('#project_count').html(Object.size(this.projects));
      jq('#activity_count').html(this.activities.length);
      data.attributes["activity count"] = {original_name: "activity county", name: "Activities"}
      data.attributes["financing"] = {original_name: "financing", name: "Financing"}
      data.features = this.projects;

      F1.Visualizer.charts.grid(400, 960, data, "projects-table", project_attributes);
    },
    sectorPieChart: function(sector_name) {
      var self = this;

      var projects = [];
      var funding = 0;
      var sector_names = "";
      if(sector_name == "all") {
        for(var sn in self.sectors) {
          projects.push(self.sectors[sn].projects);
          funding += self.sectors[sn].funding;
        }
        projects = projects.flatten(); 
      } else {
        // projects = self.sectors[sector_name].projects;
        // funding = self.sectors[sector_name].funding;
        for(var sn=0;sn<self.visibleSectors.length;sn++) {
          if(self.sectors[self.visibleSectors[sn]] != null) {
            //console.log(self.sectors[self.visibleSectors[sn]].projects);
            projects.push(self.sectors[self.visibleSectors[sn]].projects);
            funding += self.sectors[self.visibleSectors[sn]].funding;
            if(sn != 0){
              sector_names += ", ";
            }
            sector_names += self.visibleSectors[sn].capitalize();
          }
        }
        
        projects = projects.flatten();
      }
      
      //////console.log(self.sectors[sector_name].projects);
      if(projects.length == 0){
        jq('#chart-left-pie-chart').hide();
        jq('#sector_funding_total').html("There are no projects in this sector.");
        return;
      }
            
      jq('#sector_funding_title').html("Project Funding for " + sector_names + " Projects <a href='#footnote' title='(as of June 30,2010)'>[1]</a>")
      jq('#sector_funding_total').html(funding.toFixed(1) + " Million");
      
      var links = jq.map(projects, function (project) { 
          return "javascript:wb.highlighProject('" + project["project id"] + "');";  
        });
      
      pie_options = {"features":projects, 
          "attributes": {"data":{"name": "Funding","original_name": "financing amount"},
          "description":{"name": "Project","original_name": "project id"}, 
          "sort":{"name": "Funding","original_name": "financing amount"} } };
      jq('#chart-left-pie-chart').show();

      F1.Visualizer.charts.pie(180, 505, pie_options, "chart-left-pie-chart", {href: links });
    },
    sectorFundingBars: function() {
      var self = this;
      var s;
      var features = [];
      var links = [];

      for(s in self.sectors) { 
        features.push(self.sectors[s]);
        links.push( self.sectors[s]["sector"] );
      }

      jq('#funding_total').html(self.total_funding.toFixed(1) + " Million");
      
      bar_options = {"features":features, "attributes": {
            "data":{"name": "Financing", "original_name": "funding"}, 
            "description":{"name": "Sector", "original_name": "sector1"}, 
            "sort":{"name": "Total Amount","original_name": "funding"} } };
      F1.Visualizer.charts.bar(180, 455, bar_options, "chart-right-graph", {href: links, label: function() {
        return links[this.bar.index];
      }, onclick: function() {
          wb.toggleSector(links[this.bar.index]);
         }});
    },
    getLayers: function(map) {
      var self = this;
      var findlayers = ["Indicators", "Project Locations", "Project Counts", "Population", "Poverty", "Infant Mortality", "Maternal Health", "Malnutrition"];
      var possibleLayers = map.getLayers();
      var j,f;
      var index;
      var found;
      for(f=0; f<findlayers.length; f++) {
        for(j in possibleLayers) {
          //index = Object.include(findlayers, possibleLayers[j].title);
          if(findlayers[f] == possibleLayers[j].title){
            self.stylelayers[findlayers[f]] = {order: possibleLayers[j].order, source: possibleLayers[j].source};
            break;
          } else {
            self.stylelayers[findlayers[f]] = {order: possibleLayers[j].order, source: self.stylelayers["Indicators"].source};          
          }
         }
       }
       jq('#download_data').attr('href','<%= PLATFORM_API_URL %>/datasets/' + self.stylelayers["Project Locations"].source.replace("finder:","")  + ".csv")
       return false;
    },
    styleMap: function(map) {
      var self = this;
      
      // icons
      map.swf.addLayerCategoryFilter(self.stylelayers["Project Locations"].order, {attribute:"sector1code",categories:sector_icons});
      // infowindow
      map.swf.addLayerInfoWindowFilter(self.stylelayers["Project Locations"].order, {title: "$[project title]", subtitle: "$[sector1]", tabs:[{title: "About", type: "text", value:"Total Disbursement: $ $[total disb] million\nTotal Financing: $ $[total amt] million"}, {title: "Financing", type: "table", value: "$[project id]$[total disb]$[activity count]$[adm1]$[adm2]$[region]$[approval date]$[sector1]$[sector2]$[sector3]$[sector1code]"}]});
      
      // just health sector
      wb.toggleSector("health");
      map.swf.showLayer(self.stylelayers["Project Locations"].order, true);
      
      // legend
      map.swf.setStyle( { 
        legend: { buttonBgColor:0x92948C, buttonPlacement:"horizontal", 
                  buttonFontColor:0xFFFFFF, buttonBgAlpha:0.7,offset:{x:40,y:103}}
                });
    },
    drawCharts: function(map) {
      var self = this;
      if( self.initialized ) {return;}
      // self.map.showControl("Legend",true,"open");
      self.getLayers(map);
      self.styleMap(map);
      F1.Visualizer.utils.get_data_from_flash(self.stylelayers["Project Locations"].source.replace("finder:",""), function(data) {
          self.sortData(data);
          self.projectTable(data);
          self.sectorFundingBars();
          self.initialized = true;
        }, map);
      }      
  }
})();  // preserving the global namespace

jq("#banner-header").click(function () {
      jq("#collapsible-banner").hide("blind", { direction: "vertical" }, 2000);
});
jq(".banner-open-image").click(function() {
      jq("#collapsible-banner").show("blind", { direction: "vertical" }, 2000);
  
})

var wb = new F1.WorldBank();
wb.init(<%= @country[:map].to_s %>);

function initializeWorldBank(wb_project) { wb_project.drawCharts(wb_project.map)}
</script>